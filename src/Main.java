import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Main {
    public static void main(String[] args) {
        //1. Stream.ofNullable
        //2. Stream.iterate
        //3. Collectors.collectingAndThen
        //4. Stream.takenWhile and Stream.dropWhile
        //5. Collectors.teeing
        //6. Stream.concat
        //7. Collectors.partitioningBy
        //8. IntStream for Ranges

        //ðŸ‘‰ 1. Stream.ofNullable -----------------------------------------------------------------------------------------
        // Initialize a list of names, including null values
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", null, "David", "Edward", null, "Frank");

        /*
         * The following code snippet is part of the Java Stream API that performs several operations on a list:
         *
         * 1. The Java 8 Stream API is used to process the list. The Stream API is a powerful tool that allows
         * developers to perform complex data processing queries on their data.
         *
         * 2. The 'flatMap' method is used in conjunction with 'Stream::ofNullable' to filter out null values from the
         *    list.
         *    'flatMap' is a method in the Stream API that takes a function as an argument, which returns a new stream.
         *    'Stream::ofNullable' is a static method in the Stream API that returns an empty stream if the provided
         *    value is null,
         *    or a stream containing the provided value if it is not null. This combination effectively filters out
         *    null values from the list.
         *
         * 3. The 'toList' method is used to collect the result into a new list. 'toList' is a convenient method
         *    in the Stream API
         *    that collects all elements in the stream into a new List instance.
         */
        List<String> nonNullNames = names.stream().flatMap(Stream::ofNullable).toList();
        System.out.println(nonNullNames);

        //ðŸ‘‰ 2. Stream.iterate --------------------------------------------------------------------------------------------
        /*
         * The following code snippet uses the `Stream.iterate` method from the Java Stream API to generate an infinite
         * stream of odd numbers:
         *
         * 1. `Stream.iterate` is a static method used to create a new stream where each element is generated by
         *     applying a function to the previous element.
         *
         * 2. The first argument to `Stream.iterate` is the initial element. In this case, it's 1, which is
         *    the first odd number.
         *
         * 3. The second argument is a lambda function that takes the current number and returns the next number.
         *    In this case, it's `n -> n + 2`, which generates the next odd number.
         *
         * 4. This results in an infinite stream of odd numbers: 1, 3, 5, 7, 9, 11, 13, and so on.
         */
        Stream.iterate(1, n -> n + 2)

                /*
                 * The following code snippet uses the `limit` method from the Java Stream API to truncate an infinite
                 * stream:
                 *
                 * 1. The `limit` method is a terminal operation that truncates the stream to be no longer than the
                 * given size.
                 *
                 * 2. In this case, it's used to truncate the infinite stream of odd numbers after the first 10 elements.
                 *
                 * 3. This results in a finite stream of the first 10 odd numbers: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19.
                 */.limit(10).forEach(System.out::println);


        //ðŸ‘‰ 3. Collectors.collectingAndThen ------------------------------------------------------------------------------
        List<Person> list = Arrays.asList(new Person("Alice", 25), new Person("Bob", 48), new Person("Charlie", 28));

        Long collect = list.stream()
                /*
                 * The following code snippet is part of the Java Stream API that performs several operations on a
                 * list of Person objects:
                 *
                 * 1. A stream in Java is a sequence of elements supporting sequential and parallel aggregate operations.
                 *    In this case, the stream is created from a list of Person objects.
                 *
                 * 2. The 'mapToDouble' method is used to transform each Person object in the stream to a double value,
                 *    which is the age of the person:
                 *    .mapToDouble(Person::getAge)
                 *
                 * 3. The 'Person::getAge' is a method reference that is equivalent to the lambda expression
                 *    'person -> person.getAge()'.
                 *
                 * 4. After that, the 'boxed' method is used to box the primitive double values to
                 *    their corresponding Double objects.
                 */

                .mapToDouble(Person::getAge).boxed()
                /*
                 * The following section of the code is performing a reduction operation on a stream of Person objects.
                 *
                 * The 'collect' method is a terminal operation in the Java Stream API. It performs a mutable reduction
                 * operation on the elements of the stream.
                 * In this case, it is transforming the elements of the stream into a single Long value.
                 *
                 * The 'Collectors.collectingAndThen' method is a special collector that allows performing another
                 * action after the collection.
                 * In this case, it is first calculating the average age of the persons using
                 * 'Collectors.averagingDouble(Double::doubleValue)'.
                 * This calculates the average of the Double values in the stream, which in this context are the ages
                 * of the Person objects.
                 *
                 * After the average age is calculated, 'Math::round' is applied to the result.
                 * This function rounds the average to the nearest long value.
                 *
                 * The result of this operation is then assigned to the 'collect' variable.
                 */

                //Simple Explain
                /*
                 * The following code snippet is a part of the Java Stream API that performs several operations:
                 *
                 * .collect(): This is a terminal operation in Java's Stream API. It performs a mutable reduction
                 * operation on the elements of the stream. In simpler terms, it takes all the elements in the stream
                 * and combines them into a single result.
                 *
                 * Collectors.collectingAndThen(): This is a special collector that performs a collection operation and
                 * then applies a function to the result. It takes two arguments: another collector and a function.
                 *
                 * Collectors.averagingDouble(Double::doubleValue): This is the collector passed as the first argument
                 * to collectingAndThen(). It calculates the average of the stream elements. In this case,
                 * it's averaging the Double values in the stream.
                 *
                 * Math::round: This is the function passed as the second argument to collectingAndThen(). After the
                 * average is calculated, this function is applied to the result. It rounds the average to
                 * the nearest long value.
                 *
                 */.collect(Collectors.collectingAndThen(Collectors.averagingDouble(Double::doubleValue), Math::round));

        System.out.println(collect);

    }
}